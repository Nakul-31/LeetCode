import heapq
from typing import List

class FoodRatings:

    def __init__(self, foods: List[str], cuisines: List[str], ratings: List[int]):
        self.food_info = {}  # food -> (cuisine, rating)
        self.cuisine_map = {}  # cuisine -> heap [(-rating, food)]
        
        for food, cuisine, rating in zip(foods, cuisines, ratings):
            self.food_info[food] = (cuisine, rating)
            if cuisine not in self.cuisine_map:
                self.cuisine_map[cuisine] = []
            heapq.heappush(self.cuisine_map[cuisine], (-rating, food))

    def changeRating(self, food: str, newRating: int) -> None:
        cuisine, _ = self.food_info[food]
        # Update rating in food_info
        self.food_info[food] = (cuisine, newRating)
        # Push new rating to heap
        heapq.heappush(self.cuisine_map[cuisine], (-newRating, food))

    def highestRated(self, cuisine: str) -> str:
        heap = self.cuisine_map[cuisine]
        # Lazy removal: pop until top matches current rating
        while heap:
            rating, food = heap[0]
            _, current_rating = self.food_info[food]
            if -rating == current_rating:  # valid entry
                return food
            heapq.heappop(heap)  # discard stale entry
