class Solution(object):
    def numberOfPairs(self, points):
        n = len(points)

        # Step 1: Coordinate compression
        xs = sorted(set(x for x, y in points))
        ys = sorted(set(y for x, y in points))
        x_map = {v: i for i, v in enumerate(xs)}
        y_map = {v: i for i, v in enumerate(ys)}

        comp_points = [(x_map[x], y_map[y]) for x, y in points]

        # Step 2: Build 2D prefix sum
        max_x, max_y = len(xs), len(ys)
        grid = [[0] * (max_y+1) for _ in range(max_x+1)]
        for x, y in comp_points:
            grid[x+1][y+1] += 1

        for i in range(1, max_x+1):
            for j in range(1, max_y+1):
                grid[i][j] += grid[i-1][j] + grid[i][j-1] - grid[i-1][j-1]

        def rect_sum(x1, y1, x2, y2):
            """Return number of points in rectangle [x1..x2] x [y1..y2] (inclusive)"""
            return grid[x2+1][y2+1] - grid[x1][y2+1] - grid[x2+1][y1] + grid[x1][y1]

        # Step 3: Count valid pairs
        ans = 0
        for i in range(n):
            ax, ay = comp_points[i]
            for j in range(n):
                if i == j:
                    continue
                bx, by = comp_points[j]
                if points[i][0] <= points[j][0] and points[i][1] >= points[j][1]:
                    x1, x2 = ax, bx
                    y1, y2 = by, ay
                    if x1 <= x2 and y1 <= y2:
                        cnt = rect_sum(x1, y1, x2, y2)
                        if cnt == 2:  # only Alice and Bob
                            ans += 1
        return ans
